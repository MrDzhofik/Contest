// // На планете началась вечная зима, теперь выпавший снег совсем перестал таять.
// Каждый день выпадает несколько миллиметров снега, после чего метеостанция замеряет глубину снега в
// одном месте и записывает её на отдельный лист в журнал. Достоверно известно, что перед первым днем замеров снега не было вовсе,
//  а далее на протяжении всего периода замеров за день выпадало положительное целое число миллиметров снега.

// Вы получили в распоряжение журнал, чтобы проверить, не допустили ли ошибку на метеостанции при
// заполнении по случайности или из злого умысла. Но перед его изучением решили выпить чашечку кофе
// (вечная зима на дворе!) и случайно разлили его на журнал. В результате чего на некоторых его листах оказались неразличимые кляксы.

// Теперь вы просто хотите найти количество снега в миллиметрах, которое могло выпасть в каждый день замера или
// обличить метеостанцию в подтасовке, если по испорченному журналу можно достоверно сказать, что данные фальсифицированы.

// Среди всех вариантов ответа вас устроит любой, главное, чтобы он согласовывался с сохранившимися данными из испорченного журнала.

// Формат входных данных

// В первой строке входных данных содержится число nn (1≤n≤105)(1≤n≤105) — количество дней, на протяжении которых проводились замеры.

// Во второй строке содержатся nn целых чисел aiai, разделенных пробелом. aiai равно −1−1, если соответствующий лист нечитаемый, а иначе это число,
// записанное на ii-м листе, в этом случае aiai​ не превосходит 109109.

// Формат выходных данных

// Если в журнале была допущена ошибка, выведите «NONO» (без кавычек). В противном случае,
// в первой строке выведите «YESYES», а во второй строке выведите nn натуральных чисел от 11 до 109109, ii-е из
// которых равняется количеству выпавшего снега в ii-й день.
// Примеры данных
// Пример 1
// 5
// 1 3 -1 10 -1
// YES
// 1 2 3 4 5
// Пример 2
// 3
// 10 -1 4
// NO

package main

import (
	"fmt"
)

func main() {
	var n int
	fmt.Scan(&n)

	a := make([]int, n)
	for i := 0; i < n; i++ {
		fmt.Scan(&a[i])
	}

	res := make([]int, n)

	if a[0] != -1 {
		res[0] = a[0]
	}

	for i := 1; i < n; i++ {
		if a[i] != -1 {
			if a[i] <= res[i-1] {
				fmt.Println("NO")
				return
			}
			res[i] = a[i]
		} else {
			res[i] = res[i-1] + 1
		}
	}

	fmt.Println("YES")
	for i := 0; i < n; i++ {
		fmt.Printf("%d ", res[i])
	}
}
